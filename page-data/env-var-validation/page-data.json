{"componentChunkName":"component---src-templates-blog-post-js","path":"/env-var-validation/","result":{"data":{"site":{"siteMetadata":{"title":"Always learning"}},"markdownRemark":{"id":"7782c2b9-bef0-5053-9fce-b29530186573","excerpt":"Validating environment variables against a defined schema is a vital part of app-startup. We’ll show how to achieve this using Joi. When pushing code to higher…","html":"<p>Validating environment variables against a defined schema is a vital part of app-startup. We’ll show how to achieve this using Joi. When pushing code to higher environments, it’s easy to forget to add the necessary environment variables to your deployment environment. This can lead to unusual or hard-to-spot errors in your application code. </p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Node and npm installed</li>\n</ul>\n<h2>Setting up the Express App</h2>\n<p>First, we’ll initialise a new node project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init</code></pre></div>\n<p>Follow the steps to create your <code class=\"language-text\">package.json</code> file. </p>\n<p>Now let’s install the dependencies we need:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i --save express dotenv joi </code></pre></div>\n<p>We’re using <a href=\"https://www.npmjs.com/package/express\">express</a> to build a simple web server, <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a> to load our environment variables from a <code class=\"language-text\">.env</code> file, and finally <a href=\"https://www.npmjs.com/package/joi\">joi</a> for validating our env vars against a schema.</p>\n<p>Now we’ll create our .env file: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> .env</code></pre></div>\n<p>In <code class=\"language-text\">.env</code> we can add whatever environment variables we might need:</p>\n<div class=\"gatsby-highlight\" data-language=\"env\"><pre class=\"language-env\"><code class=\"language-env\">PORT=3000\nCLIENT_ID=example-app</code></pre></div>\n<p>** Don’t forget to add this file to your <code class=\"language-text\">.gitignore</code> to keep any important secrets and API keys out of version control.</p>\n<p>Now we can create a simple Express server:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> index.js</code></pre></div>\n<p>And then we’ll add the following to our <code class=\"language-text\">index.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'home route...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'App is listening on port '</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first line is importing the <code class=\"language-text\">dotenv</code> package and calling it’s <code class=\"language-text\">config()</code> method, which will load the environment variables from the <code class=\"language-text\">.env</code> file that we created earlier. It will allow us to access them like on line 6 using <code class=\"language-text\">process.env.PORT</code> for example. </p>\n<p>The rest is a simple Express app, we won’t go into too much detail. In short, it’s registering a single GET endpoint <code class=\"language-text\">/</code>, and listening on the port that we set in our <code class=\"language-text\">.env</code> file. </p>\n<p>If you run <code class=\"language-text\">node index.js</code>, you should be able to access it at <a href=\"http:localhost:3000/\">localhost:3000/</a> and see this in your browser:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">home route...</code></pre></div>\n<h2> Adding Env Var Validation</h2>\n<p>Now we’ve got a boilerplate Express app, it’s time to add env var validation. </p>\n<p>First, we’ll create a new file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> configValidator.js</code></pre></div>\n<p>In the file, let’s add some stuff:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Joi <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'joi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validateConfig</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">envVars</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> envSchema <span class=\"token operator\">=</span> Joi<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> Joi<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">CLIENT_ID</span><span class=\"token operator\">:</span> Joi<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unknown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> envSchema<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>envVars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>validateConfig <span class=\"token operator\">=</span> validateConfig<span class=\"token punctuation\">;</span></code></pre></div>\n<p>We’re declaring a function <code class=\"language-text\">validateConfig</code> which contains our schema <code class=\"language-text\">envSchema</code>. For larger applications with more environment variables, it would probably make sense to separate the schema and the function. In our case, it’s a small demo app so we’ve done it all in the same place. </p>\n<p>The <code class=\"language-text\">envSchema</code> that we declare is written using the methods provided by Joi. The syntax for this can all be found in the <a href=\"https://joi.dev/api/\">Joi docs</a>. We’ve declared our <code class=\"language-text\">PORT</code> as a number that is required, and our <code class=\"language-text\">CLIENT_ID</code> as a string that is also required. </p>\n<p>Finally, we’ve chained a <code class=\"language-text\">.unknown()</code>. The reason for this is that our local environment will have plenty of other environment variables on top of what we’ve defined in our <code class=\"language-text\">.env</code> file. Chaining <code class=\"language-text\">.unknown()</code> tells Joi to ignore these unknown keys when validating something against the schema. </p>\n<p>At the moment, this function is a void function which is simply logging the <code class=\"language-text\">error</code> object to the console. Let’s update this to pull out some useful information, and throw an error. Our <code class=\"language-text\">configValidator.js</code> file becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Joi <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'joi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validateConfig</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">envVars</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> envSchema <span class=\"token operator\">=</span> Joi<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">PORT</span><span class=\"token operator\">:</span> Joi<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">CLIENT_ID</span><span class=\"token operator\">:</span> Joi<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unknown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> envSchema<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>envVars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> errorMessages <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Env var config validation error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>errorMessages<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>validateConfig <span class=\"token operator\">=</span> validateConfig<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, when any of the values don’t match the schema requirements, an error will be thrown which details what’s wrong. </p>\n<h2>Calling the Validator Function in our Express App</h2>\n<p>Finally, we can call this validator function from our Express app. In <code class=\"language-text\">index.js</code> let’s add the following two lines straight after our imports:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> validateConfig <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./configValidator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">validateConfig</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Our <code class=\"language-text\">index.js</code> file should now look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> validateConfig <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./configValidator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">validateConfig</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'home route...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'App is listening on port '</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As simple as that. Now, our app will check against our schema that the necessary environment variables before it starts up. If any are missing or invalid, it will throw an error, alerting us to the problem. </p>\n<p>When adding new environment variables, simply update the schema to reflect the changes. </p>\n<h2>Summary</h2>\n<p>Adding schema validation using Joi is really straightforward. Using this for the environmnet variables in an app is a useful step in app instantiation, highlighting any easy mistakes early on, saving you from spending time on confusing bugs due to config. The full repo of this example can be found <a href=\"https://github.com/sk52/env-var-validation-example\">here</a>.</p>","frontmatter":{"title":"Environment Variable Validation Using Joi","tags":["Node.js","Express"],"date":"March 18, 2022","description":null}},"previous":{"fields":{"slug":"/mac-setup/"},"frontmatter":{"title":"Favourite Mac Tools (Setting up a Mac)"}},"next":{"fields":{"slug":"/adding-a-sitemap-xml-to-gatsby-site/"},"frontmatter":{"title":"Adding a Sitemap.xml to Gatsby Site"}}},"pageContext":{"id":"7782c2b9-bef0-5053-9fce-b29530186573","previousPostId":"3f0259e8-7cee-5eae-b598-adfce4d39731","nextPostId":"55d6085d-f758-53f4-baa3-ebc0ca01bccc"}},"staticQueryHashes":["230163734","2841359383"]}