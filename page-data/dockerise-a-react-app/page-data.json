{"componentChunkName":"component---src-templates-blog-post-js","path":"/dockerise-a-react-app/","result":{"data":{"site":{"siteMetadata":{"title":"Always learning"}},"markdownRemark":{"id":"fb089a2a-fc86-570d-aa54-4aee338b1f64","excerpt":"Building React projects locally is usually frictionless. Mostly commonly you’ll start off with create-react-app to quickly get up and running. \nWhen it comes to…","html":"<p>Building React projects locally is usually frictionless. Mostly commonly you’ll start off with create-react-app to quickly get up and running.\nWhen it comes to deploying, there are various options, but getting the config correct can sometimes cause a headache.\nBuilding a Docker image of your built React app can simplify this. Keep reading to find out how.</p>\n<h2>What</h2>\n<p>We’ll be using <a href=\"https://reactjs.org/\">React</a> to create a basic static site.\nWe’ll also be using <a href=\"https://www.docker.com/\">Docker</a> to containerize the application, making it easy to run anywhere.\nWithin the Docker image, we’ll be using a simple <a href=\"https://www.nginx.com/\">nginx</a> web server to serve up the static site’s production build files.</p>\n<h2>How</h2>\n<h3>Creating the Project</h3>\n<p>To create a project using <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-react-app my-app</code></pre></div>\n<p>Once it’s complete, we should be able to run the application using <code class=\"language-text\">npm run start</code>, and see the React logo spinning in our browser at localhost:3000</p>\n<p>This is simply the local dev version of the application. It is mostly used to give quick feedback whilst developing the application.</p>\n<h3>Creating the Dockerfile</h3>\n<p>Now, we’ll go ahead and create a Dockerfile: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> Dockerfile</code></pre></div>\n<p>In that Dockerfile, we can add the following: </p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>14.9.0 AS build<span class=\"token punctuation\">-</span>step\n\n<span class=\"token keyword\">WORKDIR</span> /build\n<span class=\"token keyword\">COPY</span> package.json package<span class=\"token punctuation\">-</span>lock.json ./\n<span class=\"token keyword\">RUN</span> npm install\n\n<span class=\"token keyword\">COPY</span> . .\n<span class=\"token keyword\">RUN</span> npm run build\n\n<span class=\"token keyword\">FROM</span> nginx<span class=\"token punctuation\">:</span>1.18<span class=\"token punctuation\">-</span>alpine\n<span class=\"token keyword\">COPY</span> nginx.conf /etc/nginx/nginx.conf\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>from=build<span class=\"token punctuation\">-</span>step /build/build /frontend/build</code></pre></div>\n<p>This Dockerfile has two parts to it, the first part is referred to as <code class=\"language-text\">build-step</code> which you can see on the first line.\nThis step specifies our working directory as <code class=\"language-text\">/build</code>. </p>\n<p>Next, the package files are copied to the working directory, followed by an <code class=\"language-text\">npm install</code>.</p>\n<p>We then copy the remaining files from our project into the working directory, and finally, run an <code class=\"language-text\">npm run build</code> command to build the production-ready code.</p>\n<p>The second step is to configure the nginx server. You’ll notice that we copy a <code class=\"language-text\">nginx.conf</code> file (we’ll look at this in the next step).\nAnd then, finally, we copy the build folder from the first step into a directory for nginx to use.</p>\n<h3>Creating the Nginx Config</h3>\n<p>In the application root directory, we’ll create a config file for nginx by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> nginx.conf</code></pre></div>\n<p>Inside the file, we’ll add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">user  nginx;\nworker_processes  1;\n\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  include /etc/nginx/mime.types;\n  server {\n    listen 80;\n    root /frontend/build;\n    index index.html;\n\n    location / {\n      try_files $uri /index.html;\n    }\n  }\n}</code></pre></div>\n<p>This configures a simple nginx web server, and specifies the root directory and index file that we copied in the later step of our Dockerfile. The nginx server will listen on port 80 as default. </p>\n<h3>.dockerignore</h3>\n<p>It is wise to add a <code class=\"language-text\">.dockerignore</code> file to the repository to minimise the number of files copied to the docker image. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> .dockerignore</code></pre></div>\n<p>Copy the contents of the default <code class=\"language-text\">.gitignore</code> file into the <code class=\"language-text\">.dockerignore</code> file</p>\n<h3>Creating a docker-compose file</h3>\n<p>Now, we’ll create a docker-compose file to help us with building our Docker image and passing any config that we need. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> docker-compose.yml</code></pre></div>\n<p>Inside the file we can then add:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.2'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">my-app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Dockerfile'</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'3000:80'</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./<span class=\"token punctuation\">:</span>/frontend</code></pre></div>\n<p>This specifies the service name, and the source of the Dockerfile (in this case, ‘Dockerfile’). It also maps the port of the nginx server (80) to an external port 3000.</p>\n<p>We can now build the image using the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose up -d --build my-app</code></pre></div>\n<p>This might take some time.\nOnce complete, you should be able to access your React app on <a href=\"localhost:3000\">localhost:3000</a>, served from within the Docker image. </p>\n<h2>Summary</h2>\n<p>In just a few steps we’ve been able to Dockerise a simple React app. This can help to simplify the process of deploying your production-code, or sharing the application with a friend to run locally.</p>","frontmatter":{"title":"React Project in Docker","date":"December 02, 2021","description":null}},"previous":{"fields":{"slug":"/using-console.time/"},"frontmatter":{"title":"Using console.time and console.timeEnd in JavaScript"}},"next":{"fields":{"slug":"/alternative-to-npm-link/"},"frontmatter":{"title":"Alternative to NPM Link"}}},"pageContext":{"id":"fb089a2a-fc86-570d-aa54-4aee338b1f64","previousPostId":"6380ed5e-b420-5b92-a266-b289e5c4689d","nextPostId":"3ab68165-fc86-5cec-be74-113ffa10052c"}},"staticQueryHashes":["230163734","2841359383"]}