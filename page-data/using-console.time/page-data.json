{"componentChunkName":"component---src-templates-blog-post-js","path":"/using-console.time/","result":{"data":{"site":{"siteMetadata":{"title":"Always learning"}},"markdownRemark":{"id":"6380ed5e-b420-5b92-a266-b289e5c4689d","excerpt":"When writing code we often try to optimise our implementations to reduce the time complexity. \nOptimising code results a better experience for end users, as…","html":"<p>When writing code we often try to optimise our implementations to reduce the time complexity.\nOptimising code results a better experience for end users, as they have to wait less time for a response.\nIn this post we’ll be looking at how you can use <code class=\"language-text\">console.time()</code> and <code class=\"language-text\">console.timeEnd()</code> in JavaScript to time a block of code. </p>\n<h2>How to use console.time()</h2>\n<p>You might be familiar with using <code class=\"language-text\">console.log()</code> in JavaScript to log some data. The console object also has some other methods available.\nNamely, the <code class=\"language-text\">time()</code> and <code class=\"language-text\">timeEnd()</code> methods. </p>\n<p>To use these, simply place them before and after a block of code that you wish to time, with the same argument passed to each method call:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const pets = [\n  {type: &#39;dog&#39;, name: &#39;Dave&#39;}, \n  {type: &#39;cat&#39;, name: &#39;Freddie&#39;}, \n  {type: &#39;dog&#39;, name: &#39;Monty&#39;}\n];\n\nconsole.time(&#39;filterDogs&#39;);\n\n// code block to time\nconst dogs = pets.filter(pet =&gt; \n  pet.type === &#39;dog&#39;\n);\n\nconsole.timeEnd(&#39;filterDogs&#39;);</code></pre></div>\n<p>The logged output will look something like this: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">filterDogs: 0.052001953125 ms</code></pre></div>\n<h2>Summary</h2>\n<p>It is as simple as that. Just be sure to pass the same argument into both the <code class=\"language-text\">console.time()</code> and <code class=\"language-text\">console.timeEnd()</code> methods.\nYou can also use several timers in a single piece of code, either sequentially or nested.\nThis can be a useful tool when assessing the performance of your code. </p>","frontmatter":{"title":"Using console.time and console.timeEnd in JavaScript","date":"November 17, 2021","description":null}},"previous":{"fields":{"slug":"/publishing-a-private-package-to-github/"},"frontmatter":{"title":"Publishing a Private Package to GitHub"}},"next":{"fields":{"slug":"/dockerise-a-react-app/"},"frontmatter":{"title":"React Project in Docker"}}},"pageContext":{"id":"6380ed5e-b420-5b92-a266-b289e5c4689d","previousPostId":"d6f5ca23-b0a7-5993-b195-0bb5da62e64e","nextPostId":"fb089a2a-fc86-570d-aa54-4aee338b1f64"}},"staticQueryHashes":["230163734","2841359383"]}