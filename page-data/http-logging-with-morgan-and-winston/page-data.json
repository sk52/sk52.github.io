{"componentChunkName":"component---src-templates-blog-post-js","path":"/http-logging-with-morgan-and-winston/","result":{"data":{"site":{"siteMetadata":{"title":"Always learning"}},"markdownRemark":{"id":"ba0db2cd-c432-5801-8c3f-06171918a2f1","excerpt":"Adding HTTP logging to an Express app can provide useful insights when debugging production bugs. \nWe’ll walk through how to add logging which looks something…","html":"<p>Adding HTTP logging to an Express app can provide useful insights when debugging production bugs.\nWe’ll walk through how to add logging which looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2022</span>-02-25T11:46:04.194Z <span class=\"token punctuation\">[</span>http<span class=\"token punctuation\">]</span> GET / <span class=\"token number\">200</span> <span class=\"token number\">32</span> - <span class=\"token number\">5.867</span> ms\n<span class=\"token number\">2022</span>-02-25T11:46:26.073Z <span class=\"token punctuation\">[</span>http<span class=\"token punctuation\">]</span> GET /user <span class=\"token number\">304</span> - - <span class=\"token number\">0.957</span> ms</code></pre></div>\n<h2>Pre-requisites</h2>\n<p>We’ll need a simple Node.js / Express application. You can find the example repo for this demo <a href=\"https://github.com/sk52/morgan-winston-example\">here</a>.</p>\n<h2>How</h2>\n<p>First, we need to install <a href=\"https://www.npmjs.com/package/morgan\">Morgan</a> and <a href=\"https://github.com/winstonjs/winston\">Winston</a>:</p>\n<p><code class=\"language-text\">npm i morgan winston --save</code></p>\n<p>Morgan provides HTTP request logging middleware, whilst Winston gives us the logging capability. </p>\n<p>Now that we’ve installed the required dependencies, let’s require them in our <code class=\"language-text\">index.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> morgan <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'morgan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> winston <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'winston'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then we’ll be able to declare our logger using Winston:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> winston<span class=\"token punctuation\">.</span><span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    format<span class=\"token operator\">:</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>\n        format<span class=\"token punctuation\">.</span><span class=\"token function\">colorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        format<span class=\"token punctuation\">.</span><span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        format<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>timestamp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>level<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">winston<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>level<span class=\"token operator\">:</span> <span class=\"token string\">'http'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let’s take a look at what we’re setting up here. We’re passing a config object into the <code class=\"language-text\">createLogger</code> method that we’re calling. </p>\n<p>The config object has a few fields. <code class=\"language-text\">format</code> defines how we would like our log messages to be formatted. There are a number of options for this, which can be found in more detail <a href=\"https://github.com/winstonjs/winston#colorizing-standard-logging-levels\">here</a>. </p>\n<p>In our example, we’re using a combination of winston format types, and the <code class=\"language-text\">format.printf</code> option is simply setting up how our logs will be arranged. You can customise this as required. </p>\n<p>Finally, the <code class=\"language-text\">transports</code> field declares the storage type for the log messages. In our case, we’re just outputting these logs to the console. The transport has a <code class=\"language-text\">level</code> declared, which indicates the maximum logger level to be output for that transport type.</p>\n<p>Next, we can set up our Morgan logging middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> morganMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">morgan</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">':method :url :status :res[content-length] - :response-time ms'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        stream<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">write</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">http</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we’re passing some arguments into <code class=\"language-text\">morgan</code>. The first argument is <code class=\"language-text\">format</code>, the second is <code class=\"language-text\">options</code>.</p>\n<p>Our <code class=\"language-text\">format</code> argument is simply a string of predefined tokens, as per the Morgan <a href=\"https://www.npmjs.com/package/morgan#using-format-string-of-predefined-tokens\">docs</a>. </p>\n<p>The <code class=\"language-text\">options</code> argument is an object containing a single field: <code class=\"language-text\">stream</code>. This indicates the output stream for our logs. In our case, we pass an object with a callback function which simply calls the <code class=\"language-text\">http</code> method on the <code class=\"language-text\">logger</code> instance that we have set up earlier.\nBy doing this, our Morgan HTTP log will be passed to the Winston logger, where additional formatting such as timestamp will be added. </p>\n<p>Finally, we tell our app to use the middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>morganMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Summary</h2>\n<p>As demonstrated, it’s straightforward to setup both Winston and Morgan on an Node.js / Express application. The end result is some wonderfully formatted logs which show us some useful info about the HTTP requests being handled by our server. </p>","frontmatter":{"title":"HTTP Logging with Morgan and Winston","tags":["Express","Node.js"],"date":"February 25, 2022","description":null}},"previous":{"fields":{"slug":"/dockerise-a-nestjs-app/"},"frontmatter":{"title":"NestJS Project in Docker"}},"next":{"fields":{"slug":"/mac-setup/"},"frontmatter":{"title":"Favourite Mac Tools (Setting up a Mac)"}}},"pageContext":{"id":"ba0db2cd-c432-5801-8c3f-06171918a2f1","previousPostId":"dc88b96a-dac8-5934-8341-f3ce99217575","nextPostId":"3f0259e8-7cee-5eae-b598-adfce4d39731"}},"staticQueryHashes":["230163734","2841359383"]}