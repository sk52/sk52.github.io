{"componentChunkName":"component---src-templates-blog-post-js","path":"/alternative-to-npm-link/","result":{"data":{"site":{"siteMetadata":{"title":"Always learning"}},"markdownRemark":{"id":"3ab68165-fc86-5cec-be74-113ffa10052c","excerpt":"When using your own NPM packages in a project, a good dev workflow is needed to make local testing and development straightforward. Publishing your package to a…","html":"<p>When using your own NPM packages in a project, a good dev workflow is needed to make local testing and development straightforward. <a href=\"https://sk52.github.io/publishing-a-private-package-to-github/\">Publishing your package</a> to a registry makes it accessible, but before this, it is crucial to test it properly to ensure that the version you’re publishing works as expected. </p>\n<p><a href=\"https://docs.npmjs.com/cli/v8/commands/npm-link\">npm link</a> is usually the first port of call for this. It creates a symlink between local packages to, supposedly, make local development easier without the need to rebuild. </p>\n<h2>What</h2>\n<p>We’ll need a package which has been developed (see <a href=\"https://sk52.github.io/publishing-a-private-package-to-github/\">here</a> for an example of building a simple package - you can skip the publishing part for this). We’ll also need a simple project which uses the package as a dependency. </p>\n<h2>How</h2>\n<p>First, we need to install <a href=\"https://www.npmjs.com/package/yalc\">yalc</a> globally.</p>\n<p><code class=\"language-text\">npm i yalc -g</code></p>\n<p>Now, from the package we would like to link locally:</p>\n<p><code class=\"language-text\">yalc publish</code></p>\n<p>We should see something like this, confirming that it has published locally: <code class=\"language-text\">example-package@0.0.1 published in store.</code></p>\n<p>And then, from the project that we want to use the local version of the package in:</p>\n<p><code class=\"language-text\">yalc add example-package@0.0.1</code></p>\n<p>This will modify the package.json file to reflect that it is now using the local version of this dependency. It’ll also add a <code class=\"language-text\">.yalc</code> folder and a <code class=\"language-text\">yalc.lock</code> file. </p>\n<p>To prevent these from being checked into version control, simply add <code class=\"language-text\">*yalc*</code> to your <code class=\"language-text\">.gitignore</code> file. </p>\n<p>When you’re done working on it locally, remove the local yalc version of the package:</p>\n<p><code class=\"language-text\">yalc remove example-package@0.0.1</code></p>\n<h2>Summary</h2>\n<p>As we’ve seen, yalc is really straightforward to use. It’s a helpful tool when developing packages locally. </p>","frontmatter":{"title":"Alternative to NPM Link","date":"December 09, 2021","description":null}},"previous":{"fields":{"slug":"/dockerise-a-react-app/"},"frontmatter":{"title":"React Project in Docker"}},"next":{"fields":{"slug":"/dockerise-a-nestjs-app/"},"frontmatter":{"title":"NestJS Project in Docker"}}},"pageContext":{"id":"3ab68165-fc86-5cec-be74-113ffa10052c","previousPostId":"fb089a2a-fc86-570d-aa54-4aee338b1f64","nextPostId":"dc88b96a-dac8-5934-8341-f3ce99217575"}},"staticQueryHashes":["230163734","2841359383"]}