<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Always learning]]></title><description><![CDATA[A place to document and share my learning journey.]]></description><link>https://sk52.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 25 Feb 2022 12:15:08 GMT</lastBuildDate><item><title><![CDATA[HTTP Logging with Morgan and Winston]]></title><description><![CDATA[Adding HTTP logging to an Express app can provide useful insights when debugging production bugs. 
We’ll walk through how to add logging…]]></description><link>https://sk52.github.io/http-logging-with-morgan-and-winston/</link><guid isPermaLink="false">https://sk52.github.io/http-logging-with-morgan-and-winston/</guid><pubDate>Fri, 25 Feb 2022 09:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Adding HTTP logging to an Express app can provide useful insights when debugging production bugs.
We’ll walk through how to add logging which looks something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-25T11:46:04.194Z &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; GET / &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt; - &lt;span class=&quot;token number&quot;&gt;5.867&lt;/span&gt; ms
&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-25T11:46:26.073Z &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; GET /user &lt;span class=&quot;token number&quot;&gt;304&lt;/span&gt; - - &lt;span class=&quot;token number&quot;&gt;0.957&lt;/span&gt; ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;We’ll need a simple Node.js / Express application. You can find the example repo for this demo &lt;a href=&quot;https://github.com/sk52/morgan-winston-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;First, we need to install &lt;a href=&quot;https://www.npmjs.com/package/morgan&quot;&gt;Morgan&lt;/a&gt; and &lt;a href=&quot;https://github.com/winstonjs/winston&quot;&gt;Winston&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm i morgan winston --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Morgan provides HTTP request logging middleware, whilst Winston gives us the logging capability. &lt;/p&gt;
&lt;p&gt;Now that we’ve installed the required dependencies, let’s require them in our &lt;code class=&quot;language-text&quot;&gt;index.js&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; morgan &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;morgan&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; winston &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;winston&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; winston&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we’ll be able to declare our logger using Winston:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    format&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;colorize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timestamp&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; [&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;] &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    transports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;level&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s take a look at what we’re setting up here. We’re passing a config object into the &lt;code class=&quot;language-text&quot;&gt;createLogger&lt;/code&gt; method that we’re calling. &lt;/p&gt;
&lt;p&gt;The config object has a few fields. &lt;code class=&quot;language-text&quot;&gt;format&lt;/code&gt; defines how we would like our log messages to be formatted. There are a number of options for this, which can be found in more detail &lt;a href=&quot;https://github.com/winstonjs/winston#colorizing-standard-logging-levels&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In our example, we’re using a combination of winston format types, and the &lt;code class=&quot;language-text&quot;&gt;format.printf&lt;/code&gt; option is simply setting up how our logs will be arranged. You can customise this as required. &lt;/p&gt;
&lt;p&gt;Finally, the &lt;code class=&quot;language-text&quot;&gt;transports&lt;/code&gt; field declares the storage type for the log messages. In our case, we’re just outputting these logs to the console. The transport has a &lt;code class=&quot;language-text&quot;&gt;level&lt;/code&gt; declared, which indicates the maximum logger level to be output for that transport type.&lt;/p&gt;
&lt;p&gt;Next, we can set up our Morgan logging middleware:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; morganMiddleware &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;morgan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;:method :url :status :res[content-length] - :response-time ms&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        stream&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function-variable function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we’re passing some arguments into &lt;code class=&quot;language-text&quot;&gt;morgan&lt;/code&gt;. The first argument is &lt;code class=&quot;language-text&quot;&gt;format&lt;/code&gt;, the second is &lt;code class=&quot;language-text&quot;&gt;options&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code class=&quot;language-text&quot;&gt;format&lt;/code&gt; argument is simply a string of predefined tokens, as per the Morgan &lt;a href=&quot;https://www.npmjs.com/package/morgan#using-format-string-of-predefined-tokens&quot;&gt;docs&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;options&lt;/code&gt; argument is an object containing a single field: &lt;code class=&quot;language-text&quot;&gt;stream&lt;/code&gt;. This indicates the output stream for our logs. In our case, we pass an object with a callback function which simply calls the &lt;code class=&quot;language-text&quot;&gt;http&lt;/code&gt; method on the &lt;code class=&quot;language-text&quot;&gt;logger&lt;/code&gt; instance that we have set up earlier.
By doing this, our Morgan HTTP log will be passed to the Winston logger, where additional formatting such as timestamp will be added. &lt;/p&gt;
&lt;p&gt;Finally, we tell our app to use the middleware:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;morganMiddleware&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;As demonstrated, it’s straightforward to setup both Winston and Morgan on an Node.js / Express application. The end result is some wonderfully formatted logs which show us some useful info about the HTTP requests being handled by our server. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[NestJS Project in Docker]]></title><description><![CDATA[NestJS is a backend framework which aims to simplify server-side development by providing a consistent and abstract interface on top of the…]]></description><link>https://sk52.github.io/dockerise-a-nestjs-app/</link><guid isPermaLink="false">https://sk52.github.io/dockerise-a-nestjs-app/</guid><pubDate>Thu, 03 Feb 2022 18:00:00 GMT</pubDate><content:encoded>&lt;p&gt;NestJS is a backend framework which aims to simplify server-side development by providing a consistent and abstract interface on top of the usual tools such as express. Like our recent &lt;a href=&quot;/dockerise-a-react-app/&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; shows, dockerising applications is a useful approach to help streamline deployment processes. With NestJS this is no different, building a Docker image of your application’s production build can help. Keep reading to find out how.&lt;/p&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;We’ll be using &lt;a href=&quot;https://docs.nestjs.com/&quot;&gt;NestJS&lt;/a&gt; to create a basic web server.
We’ll also be using &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; to containerize the application, making it easy to run anywhere.&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;h3&gt;Creating the Project&lt;/h3&gt;
&lt;p&gt;First, install the NestJS CLI globally: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i -g @nestjs/cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, create a project:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nest new nest-project&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once it’s complete, we should be able to run the application using &lt;code class=&quot;language-text&quot;&gt;npm run start&lt;/code&gt;, and see ‘Hello World!’ in our browser at localhost:3000&lt;/p&gt;
&lt;p&gt;If we want to run it in watch mode, so that the server restarts when we make any code changes, we can simply run &lt;code class=&quot;language-text&quot;&gt;npm run start:dev&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;This is simply the local dev version of the application. It is mostly used to give quick feedback whilst developing the application.&lt;/p&gt;
&lt;h3&gt;Creating the Dockerfile&lt;/h3&gt;
&lt;p&gt;Now, we’ll go ahead and create a Dockerfile: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; Dockerfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In that Dockerfile, we can add the following: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine AS builder

&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/app&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . .

&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm ci

&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm run build

&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm prune &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;production

&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine AS production

&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/app&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;from=builder /app/package.json ./package.json
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;from=builder /app/package&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lock.json ./package&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lock.json
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;from=builder /app/dist ./dist
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;from=builder /app/node_modules ./node_modules

&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run start:prod&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Dockerfile has two parts to it, the first part is referred to as &lt;code class=&quot;language-text&quot;&gt;builder&lt;/code&gt; which you can see on the first line.
This step specifies our working directory as &lt;code class=&quot;language-text&quot;&gt;/app&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Next, the package files are copied to the working directory, followed by an &lt;code class=&quot;language-text&quot;&gt;npm run ci&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next we run an &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; command to build the production-ready code. This will place the built application code in the &lt;code class=&quot;language-text&quot;&gt;/dist&lt;/code&gt; folder within the working directory. &lt;/p&gt;
&lt;p&gt;Having carried out the build, we can safely remove any non-production dependencies from the &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; folder. We do this using the command &lt;code class=&quot;language-text&quot;&gt;npm prune --production&lt;/code&gt;, which specifies that we only want to keep production dependencies. &lt;/p&gt;
&lt;p&gt;The second and final step of the Dockerfile is the one which will be used to create the image for our application. In here we simply copy the folders and files from the first step that we need: &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;package-lock.json&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;/dist&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;/node_modules&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Finally, we run our command to start the production code in the container. &lt;/p&gt;
&lt;h3&gt;Creating a docker-compose file&lt;/h3&gt;
&lt;p&gt;Now, we’ll create a docker-compose file to help us with building our Docker image and passing any config that we need. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; docker-compose.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the file we can then add:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;3.2&apos;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;nest-project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .
      &lt;span class=&quot;token key atrule&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Dockerfile&apos;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;3000:3000&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This specifies the service name, and the source of the Dockerfile (in this case, ‘Dockerfile’). It also maps the port of the application (3000) to an external port 3000. If we wanted to expose a different port then we could update this. e.g. &lt;code class=&quot;language-text&quot;&gt;- &amp;#39;4000:3000&amp;#39;&lt;/code&gt; would expose port 4000 for us to access the application on. &lt;/p&gt;
&lt;p&gt;We can now build the image using the following command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up -d --build nest-project&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This might take some time.
Once complete, you should be able to access your NestJS app on &lt;a href=&quot;localhost:3000&quot;&gt;localhost:3000&lt;/a&gt;, served from within the Docker container. &lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In just a few steps we’ve been able to Dockerise a simple NestJS app. This can help to simplify the process of deploying your production-code, or sharing the application with a friend to run locally.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Alternative to NPM Link]]></title><description><![CDATA[When using your own NPM packages in a project, a good dev workflow is needed to make local testing and development straightforward…]]></description><link>https://sk52.github.io/alternative-to-npm-link/</link><guid isPermaLink="false">https://sk52.github.io/alternative-to-npm-link/</guid><pubDate>Thu, 09 Dec 2021 09:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When using your own NPM packages in a project, a good dev workflow is needed to make local testing and development straightforward. &lt;a href=&quot;https://sk52.github.io/publishing-a-private-package-to-github/&quot;&gt;Publishing your package&lt;/a&gt; to a registry makes it accessible, but before this, it is crucial to test it properly to ensure that the version you’re publishing works as expected. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.npmjs.com/cli/v8/commands/npm-link&quot;&gt;npm link&lt;/a&gt; is usually the first port of call for this. It creates a symlink between local packages to, supposedly, make local development easier without the need to rebuild. &lt;/p&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;We’ll need a package which has been developed (see &lt;a href=&quot;https://sk52.github.io/publishing-a-private-package-to-github/&quot;&gt;here&lt;/a&gt; for an example of building a simple package - you can skip the publishing part for this). We’ll also need a simple project which uses the package as a dependency. &lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;First, we need to install &lt;a href=&quot;https://www.npmjs.com/package/yalc&quot;&gt;yalc&lt;/a&gt; globally.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm i yalc -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, from the package we would like to link locally:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yalc publish&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We should see something like this, confirming that it has published locally: &lt;code class=&quot;language-text&quot;&gt;example-package@0.0.1 published in store.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then, from the project that we want to use the local version of the package in:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yalc add example-package@0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will modify the package.json file to reflect that it is now using the local version of this dependency. It’ll also add a &lt;code class=&quot;language-text&quot;&gt;.yalc&lt;/code&gt; folder and a &lt;code class=&quot;language-text&quot;&gt;yalc.lock&lt;/code&gt; file. &lt;/p&gt;
&lt;p&gt;To prevent these from being checked into version control, simply add &lt;code class=&quot;language-text&quot;&gt;*yalc*&lt;/code&gt; to your &lt;code class=&quot;language-text&quot;&gt;.gitignore&lt;/code&gt; file. &lt;/p&gt;
&lt;p&gt;When you’re done working on it locally, remove the local yalc version of the package:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yalc remove example-package@0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;As we’ve seen, yalc is really straightforward to use. It’s a helpful tool when developing packages locally. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Project in Docker]]></title><description><![CDATA[Building React projects locally is usually frictionless. Mostly commonly you’ll start off with create-react-app to quickly get up and…]]></description><link>https://sk52.github.io/dockerise-a-react-app/</link><guid isPermaLink="false">https://sk52.github.io/dockerise-a-react-app/</guid><pubDate>Thu, 02 Dec 2021 18:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Building React projects locally is usually frictionless. Mostly commonly you’ll start off with create-react-app to quickly get up and running.
When it comes to deploying, there are various options, but getting the config correct can sometimes cause a headache.
Building a Docker image of your built React app can simplify this. Keep reading to find out how.&lt;/p&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;We’ll be using &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; to create a basic static site.
We’ll also be using &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; to containerize the application, making it easy to run anywhere.
Within the Docker image, we’ll be using a simple &lt;a href=&quot;https://www.nginx.com/&quot;&gt;nginx&lt;/a&gt; web server to serve up the static site’s production build files.&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;h3&gt;Creating the Project&lt;/h3&gt;
&lt;p&gt;To create a project using &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-react-app my-app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once it’s complete, we should be able to run the application using &lt;code class=&quot;language-text&quot;&gt;npm run start&lt;/code&gt;, and see the React logo spinning in our browser at localhost:3000&lt;/p&gt;
&lt;p&gt;This is simply the local dev version of the application. It is mostly used to give quick feedback whilst developing the application.&lt;/p&gt;
&lt;h3&gt;Creating the Dockerfile&lt;/h3&gt;
&lt;p&gt;Now, we’ll go ahead and create a Dockerfile: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; Dockerfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In that Dockerfile, we can add the following: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14.9.0 AS build&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;step

&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /build
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; package.json package&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;lock.json ./
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm install

&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . .
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm run build

&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; nginx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;1.18&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; nginx.conf /etc/nginx/nginx.conf
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;from=build&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;step /build/build /frontend/build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Dockerfile has two parts to it, the first part is referred to as &lt;code class=&quot;language-text&quot;&gt;build-step&lt;/code&gt; which you can see on the first line.
This step specifies our working directory as &lt;code class=&quot;language-text&quot;&gt;/build&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Next, the package files are copied to the working directory, followed by an &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We then copy the remaining files from our project into the working directory, and finally, run an &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; command to build the production-ready code.&lt;/p&gt;
&lt;p&gt;The second step is to configure the nginx server. You’ll notice that we copy a &lt;code class=&quot;language-text&quot;&gt;nginx.conf&lt;/code&gt; file (we’ll look at this in the next step).
And then, finally, we copy the build folder from the first step into a directory for nginx to use.&lt;/p&gt;
&lt;h3&gt;Creating the Nginx Config&lt;/h3&gt;
&lt;p&gt;In the application root directory, we’ll create a config file for nginx by running:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; nginx.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the file, we’ll add the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;user  nginx;
worker_processes  1;

events {
  worker_connections  1024;
}

http {
  include /etc/nginx/mime.types;
  server {
    listen 80;
    root /frontend/build;
    index index.html;

    location / {
      try_files $uri /index.html;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configures a simple nginx web server, and specifies the root directory and index file that we copied in the later step of our Dockerfile. The nginx server will listen on port 80 as default. &lt;/p&gt;
&lt;h3&gt;.dockerignore&lt;/h3&gt;
&lt;p&gt;It is wise to add a &lt;code class=&quot;language-text&quot;&gt;.dockerignore&lt;/code&gt; file to the repository to minimise the number of files copied to the docker image. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; .dockerignore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy the contents of the default &lt;code class=&quot;language-text&quot;&gt;.gitignore&lt;/code&gt; file into the &lt;code class=&quot;language-text&quot;&gt;.dockerignore&lt;/code&gt; file&lt;/p&gt;
&lt;h3&gt;Creating a docker-compose file&lt;/h3&gt;
&lt;p&gt;Now, we’ll create a docker-compose file to help us with building our Docker image and passing any config that we need. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; docker-compose.yml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the file we can then add:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;3.2&apos;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;my-app&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .
      &lt;span class=&quot;token key atrule&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Dockerfile&apos;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;3000:80&apos;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/frontend&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This specifies the service name, and the source of the Dockerfile (in this case, ‘Dockerfile’). It also maps the port of the nginx server (80) to an external port 3000.&lt;/p&gt;
&lt;p&gt;We can now build the image using the following command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up -d --build my-app&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This might take some time.
Once complete, you should be able to access your React app on &lt;a href=&quot;localhost:3000&quot;&gt;localhost:3000&lt;/a&gt;, served from within the Docker image. &lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In just a few steps we’ve been able to Dockerise a simple React app. This can help to simplify the process of deploying your production-code, or sharing the application with a friend to run locally.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using console.time and console.timeEnd in JavaScript]]></title><description><![CDATA[When writing code we often try to optimise our implementations to reduce the time complexity. 
Optimising code results a better experience…]]></description><link>https://sk52.github.io/using-console.time/</link><guid isPermaLink="false">https://sk52.github.io/using-console.time/</guid><pubDate>Wed, 17 Nov 2021 07:37:00 GMT</pubDate><content:encoded>&lt;p&gt;When writing code we often try to optimise our implementations to reduce the time complexity.
Optimising code results a better experience for end users, as they have to wait less time for a response.
In this post we’ll be looking at how you can use &lt;code class=&quot;language-text&quot;&gt;console.time()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;console.timeEnd()&lt;/code&gt; in JavaScript to time a block of code. &lt;/p&gt;
&lt;h2&gt;How to use console.time()&lt;/h2&gt;
&lt;p&gt;You might be familiar with using &lt;code class=&quot;language-text&quot;&gt;console.log()&lt;/code&gt; in JavaScript to log some data. The console object also has some other methods available.
Namely, the &lt;code class=&quot;language-text&quot;&gt;time()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;timeEnd()&lt;/code&gt; methods. &lt;/p&gt;
&lt;p&gt;To use these, simply place them before and after a block of code that you wish to time, with the same argument passed to each method call:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const pets = [
  {type: &amp;#39;dog&amp;#39;, name: &amp;#39;Dave&amp;#39;}, 
  {type: &amp;#39;cat&amp;#39;, name: &amp;#39;Freddie&amp;#39;}, 
  {type: &amp;#39;dog&amp;#39;, name: &amp;#39;Monty&amp;#39;}
];

console.time(&amp;#39;filterDogs&amp;#39;);

// code block to time
const dogs = pets.filter(pet =&amp;gt; 
  pet.type === &amp;#39;dog&amp;#39;
);

console.timeEnd(&amp;#39;filterDogs&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The logged output will look something like this: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;filterDogs: 0.052001953125 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;It is as simple as that. Just be sure to pass the same argument into both the &lt;code class=&quot;language-text&quot;&gt;console.time()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;console.timeEnd()&lt;/code&gt; methods.
You can also use several timers in a single piece of code, either sequentially or nested.
This can be a useful tool when assessing the performance of your code. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Publishing a Private Package to GitHub]]></title><description><![CDATA[Working with packages is something that is almost unavoidable in the JavaScript ecosystem, but we typically find ourselves using other…]]></description><link>https://sk52.github.io/publishing-a-private-package-to-github/</link><guid isPermaLink="false">https://sk52.github.io/publishing-a-private-package-to-github/</guid><pubDate>Tue, 24 Aug 2021 17:36:00 GMT</pubDate><content:encoded>&lt;p&gt;Working with packages is something that is almost unavoidable in the JavaScript ecosystem, but we typically find ourselves using other peoples packages as dependencies in our projects. If you’ve ever wondered how to publish a package of your own, then read on.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A GitHub account&lt;/li&gt;
&lt;li&gt;An NPM account&lt;/li&gt;
&lt;li&gt;Basic NodeJS experience&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; installed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;I’ll be building a simple package to demonstrate the process of building and publishing to GitHub.
The example I’ll use is a measurement unit converter, e.g. convert miles to kilometers and vice versa. The package will contain some handy functions to crunch the numbers.&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;h3&gt;Creating the Project&lt;/h3&gt;
&lt;p&gt;We’ll use &lt;a href=&quot;https://tsdx.io/&quot;&gt;tsdx&lt;/a&gt; to create our package, it claims to be a zero-config CLI for developing TypeScript packages. Basically saving us the legwork of dealing with boilerplate config.&lt;/p&gt;
&lt;p&gt;To create a project:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;npx tsdx create unit-converter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Select the basic template when prompted.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; unit-converter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we’ll just add a couple of basic functions in &lt;code class=&quot;language-text&quot;&gt;src/index.ts&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; const milesToKilometers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance: number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;return&lt;/span&gt; distance * &lt;span class=&quot;token number&quot;&gt;1.609344&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; const kilometersToMiles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance: number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token builtin class-name&quot;&gt;return&lt;/span&gt; distance * &lt;span class=&quot;token number&quot;&gt;0.62137119223733&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want, we can add some test coverage for these functions too.&lt;/p&gt;
&lt;p&gt;Next, we’ll want to create a GitHub repo and push our work. The repo can be public or private, it’s up to you.&lt;/p&gt;
&lt;h3&gt;Adding Some Config to Package.json&lt;/h3&gt;
&lt;p&gt;To ensure that we publish to the correct registry, in the &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; add the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;publishConfig&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;registry&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://npm.pkg.github.com/&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/your-username/unit-converter&quot;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll also want to update the name and description:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@your-username/unit-converter&quot;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A package for converting units of measurement&quot;&lt;/span&gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now commit this change and push to the GitHub repo again.&lt;/p&gt;
&lt;h3&gt;Creating an .npmrc File and GitHub Access Token&lt;/h3&gt;
&lt;p&gt;We now need to create a &lt;code class=&quot;language-text&quot;&gt;.npmrc&lt;/code&gt; file in the project root, and add the following:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;//npm.pkg.github.com/:_authToken&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;${GITHUB_ACCESS_TOKEN}&lt;/span&gt;
@your-username:registry&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;https://npm.pkg.github.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will specify the registry for any packages prefixed with &lt;code class=&quot;language-text&quot;&gt;@your-username&lt;/code&gt;, it also specifies the auth token to use, which we will set in the next step using a GitHub Access Token.&lt;/p&gt;
&lt;p&gt;Next, in GitHub we’ll need to create a new Personal Access Token (PAT), which can be done in Settings -&gt; Developer settings.&lt;/p&gt;
&lt;p&gt;Copy the PAT and then in your terminal run:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;paste-access-token-here&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to login to NPM:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enter your username, password, and email address when prompted.&lt;/p&gt;
&lt;h3&gt;Publishing the Package&lt;/h3&gt;
&lt;p&gt;Now, we should be ready to try and publish.&lt;/p&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;npm version patch&lt;/code&gt; to bump our package version.&lt;/p&gt;
&lt;p&gt;And then to test our package publish:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; publish --dry-run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will do everything except actually pushing the package to the registry. If there are no errors, we can go ahead and run it for real.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; publish&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s it! If successful then the package should be visible from the GitHub repo on the right-hand-side under the “Packages” heading. It may take a few minutes to appear the first time, so be patient.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;As we’ve seen, the process of publishing your first package is less daunting than it may seem. Publishing packages is a great way to start reusing utility code across your projects, or even sharing it publicly when you’re ready to.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Deploying a Monorepo to Heroku]]></title><description><![CDATA[If you’ve ever thought about splitting your web application into more than one microservice whilst keeping them under the same GitHub…]]></description><link>https://sk52.github.io/deploy-a-monorepo-to-heroku/</link><guid isPermaLink="false">https://sk52.github.io/deploy-a-monorepo-to-heroku/</guid><pubDate>Sat, 01 May 2021 18:28:00 GMT</pubDate><content:encoded>&lt;p&gt;If you’ve ever thought about splitting your web application into more than one microservice whilst keeping them under the same GitHub repository, you may have wondered how you can deploy each microservice to separate Heroku dynos with ease.&lt;/p&gt;
&lt;p&gt;In this blog post I’ll show you how to achieve this for a monorepo comprising two node.js applications using the &lt;a href=&quot;https://elements.heroku.com/buildpacks/heroku/heroku-buildpack-multi-procfile&quot;&gt;Heroku Multi-Profile Buildpack&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What and Why&lt;/h2&gt;
&lt;p&gt;Separating an application into several separate microservices has multiple benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to separate a large and complex application into small and manageable services&lt;/li&gt;
&lt;li&gt;Developers can work on different parts of the application independent of each other&lt;/li&gt;
&lt;li&gt;Scaling the application can be done on a per-service basis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Deploying a monolithic application to Heroku is simple enough, there’s plenty of information out there which &lt;a href=&quot;https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up&quot;&gt;documents how&lt;/a&gt;. For a monorepo it gets a little more complex. Read on to find out how.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A heroku account (free tier works fine)&lt;/li&gt;
&lt;li&gt;Heroku CLI&lt;/li&gt;
&lt;li&gt;A monorepo structure containing two node.js projects as follows&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;example-app
    --packages
        |--client
        |   |--package.json
        |   |--package-lock.json
        |
        |--server
            |--package.json
            |--package-lock.json
    --package.json
    --package-lock.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;How to&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Whilst logged in to Heroku create two new apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;example-app&lt;/code&gt; - this will be our client application which end users access&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;example-app-server&lt;/code&gt; - this will be the server application which our client application integrates with&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In each application on Heroku, navigate to the settings tab and scroll down to “Buildpacks”. On each application we’ll add two buildpacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, add the multi-procfile buildpack by pasting this link - &lt;code class=&quot;language-text&quot;&gt;https://github.com/heroku/heroku-buildpack-multi-procfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Next, add the &lt;code class=&quot;language-text&quot;&gt;heroku/nodejs&lt;/code&gt; buildpack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we need to write our Procfiles and add these to their respective application folders&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is a Procfile? It’s a file which specifies the commands to run when starting an application. Heroku uses this to fire up your application during deployment.&lt;/li&gt;
&lt;li&gt;In &lt;code class=&quot;language-text&quot;&gt;packages/server&lt;/code&gt; directory, run the command:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;web: cd packages/server &amp;amp;&amp;amp; node server.js&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Procfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code class=&quot;language-text&quot;&gt;packages/client&lt;/code&gt; directory, run the command&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;web: cd packages/client &amp;amp;&amp;amp; node server.js&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Procfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Now we should be setup with both Procfiles which tell Heroku how to start our two applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, over in our repository we’ll need to use the Heroku CLI to specify our Profile locations, this lets Heroku know where to find the Procfiles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For this, we’ll use the names of our Heroku applications that we set in step 1&lt;/li&gt;
&lt;li&gt;Run the following commands:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;heroku config:set -a example-app &lt;span class=&quot;token assign-left variable&quot;&gt;PROCFILE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;packages/client/Procfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;heroku config:set -a example-app-server &lt;span class=&quot;token assign-left variable&quot;&gt;PROCFILE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;packages/server/Procfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Now Heroku knows where to find the Procfiles for our two applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heroku now knows where to find our Procfiles, however, because we have two separate applications stored within the &lt;code class=&quot;language-text&quot;&gt;client&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;server&lt;/code&gt; directories, each has their own dependencies. Heroku typically tries to install dependencies as specified in the &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; at the root of the project, and similarly will try to run the build script specified here. To ensure we install the correct dependencies and run the correct build scripts for our application, we need to specify a &lt;code class=&quot;language-text&quot;&gt;postinstall&lt;/code&gt; script in the root of our project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; file in the project root, add the following scripts:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;   &lt;span class=&quot;token string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token string&quot;&gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;if [ &lt;span class=&quot;token variable&quot;&gt;$CLIENT_ENV&lt;/span&gt; ]; then npm run postinstall-client; elif [ &lt;span class=&quot;token variable&quot;&gt;$SERVER_ENV&lt;/span&gt; ]; then npm run postinstall-server; else echo no environment detected, please set CLIENT_ENV or SERVER_ENV; fi&quot;&lt;/span&gt;,
       &lt;span class=&quot;token string&quot;&gt;&quot;postinstall-client&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cd packages/client &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm run build&quot;&lt;/span&gt;,
       &lt;span class=&quot;token string&quot;&gt;&quot;postinstall-server&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cd packages/server &amp;amp;&amp;amp; npm install&quot;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;We’ve added three scripts: &lt;code class=&quot;language-text&quot;&gt;postinstall&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;postinstall-client&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;postinstall-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Heroku will automatically run the &lt;code class=&quot;language-text&quot;&gt;postinstall&lt;/code&gt; script for us upon deployment&lt;/li&gt;
&lt;li&gt;Our postinstall script looks for environment variables &lt;code class=&quot;language-text&quot;&gt;$CLIENT_ENV&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;$SERVER_ENV&lt;/code&gt; to determine which postinstall script to run&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, we need to go into the set two environment variables in our applications on Heroku&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the Settings tab and scroll to Config Vars&lt;/li&gt;
&lt;li&gt;In the client application, add &lt;code class=&quot;language-text&quot;&gt;CLIENT_ENV=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the server application, add &lt;code class=&quot;language-text&quot;&gt;SERVER_ENV=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now our postinstall script will be able to run the correct install scripts for each of our applications on deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;That’s it! Everything should now be set up to deploy multiple applications versioned under a monorepo to several Heroku applications. Just set your Heroku applications up to deploy on push and you should be ready to go next time you push changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;This setup process provides a way of carrying out a monorepo deployment to Heroku whilst making use of the tools that Heroku offers. For more complex applications the deployment process may be better handled by a scripted pipeline using something like GitHub Actions. This would likely involve more steps, but could offer more control over the deployment process and gives the ability to incorporate it into a CI/CD pipeline which carries out unit testing and other quality steps.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Adding a GitHub Actions Status Badge to your README]]></title><description><![CDATA[In this post I will talk about adding a build status badge for a GitHub Actions workflow to the README of your repository. What and Why The…]]></description><link>https://sk52.github.io/adding-github-actions-badge/</link><guid isPermaLink="false">https://sk52.github.io/adding-github-actions-badge/</guid><pubDate>Sun, 11 Apr 2021 17:57:00 GMT</pubDate><content:encoded>&lt;p&gt;In this post I will talk about adding a build status badge for a GitHub Actions workflow to the README of your repository.&lt;/p&gt;
&lt;h2&gt;What and Why&lt;/h2&gt;
&lt;p&gt;The GitHub Actions status badge looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sk52/sk52.github.io/actions/workflows/deploy.yml&quot;&gt;&lt;img src=&quot;https://github.com/sk52/sk52.github.io/actions/workflows/deploy.yml/badge.svg?branch=main&quot; alt=&quot;Build&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It provides a nice looking insight into the status of a chosen GitHub Actions workflow. This can be handy to indicate whether or not a deployment was a success.&lt;/p&gt;
&lt;p&gt;GitHub provides an &lt;a href=&quot;https://docs.github.com/en/actions/managing-workflow-runs/adding-a-workflow-status-badge&quot;&gt;overview&lt;/a&gt; of how to set this up, but it took me a bit of extra googling to get it working.&lt;/p&gt;
&lt;h2&gt;Prerequisite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You will need an existing GitHub Actions workflow of your own already set up in the repository of your choice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to your GitHub repository, and select the “Actions” tab&lt;/li&gt;
&lt;li&gt;Find the workflow that you would like to create a status badge for&lt;/li&gt;
&lt;li&gt;In the URL append “/badge.svg” on the end and hit enter&lt;/li&gt;
&lt;li&gt;You should see the status badge image for that workflow&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simply copy this URL, and add it to your README markdown file like so: &lt;code class=&quot;language-text&quot;&gt;![Build](https://github.com/sk52/sk52.github.io/actions/workflows/deploy.yml/badge.svg)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This will add a build status image to your README which simply links to the build status image itself&lt;/li&gt;
&lt;li&gt;To link it to the workflow, wrap a markdown link around it like this: &lt;code class=&quot;language-text&quot;&gt;[![Build](https://github.com/sk52/sk52.github.io/actions/workflows/deploy.yml/badge.svg)](https://github.com/sk52/sk52.github.io/actions/workflows/deploy.yml)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Et voilà! Just like that you’ve got a neat build status svg added to your README&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sk52/sk52.github.io/actions/workflows/deploy.yml&quot;&gt;&lt;img src=&quot;https://github.com/sk52/sk52.github.io/actions/workflows/deploy.yml/badge.svg?branch=main&quot; alt=&quot;Build&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Deploying a Gatsby Site to GitHub Pages Using GitHub Actions CI/CD]]></title><description><![CDATA[In this post I will talk about setting up GitHub Actions CI/CD to automatically build and deploy my Gatsby site to GitHub Pages when I push…]]></description><link>https://sk52.github.io/setting-up-ci-cd/</link><guid isPermaLink="false">https://sk52.github.io/setting-up-ci-cd/</guid><pubDate>Sun, 28 Mar 2021 15:37:00 GMT</pubDate><content:encoded>&lt;p&gt;In this post I will talk about setting up GitHub Actions CI/CD to automatically build and deploy my Gatsby site to GitHub Pages when I push any changes to the &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; branch. The post will cover:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What I want to achieve with CI/CD, and why&lt;/li&gt;
&lt;li&gt;How I set up CI/CD using GitHub Actions to deploy to GitHub Pages&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What and Why&lt;/h2&gt;
&lt;p&gt;Gatsby provides a simple set of &lt;a href=&quot;https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/&quot;&gt;instructions&lt;/a&gt; which allow this deployment to be carried out manually by specifying a &lt;code class=&quot;language-text&quot;&gt;deploy&lt;/code&gt; command in the &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; and just running it locally. However, I’m keen to explore migrating from markdown blog posts to a headless CMS in the future, so this approach works with that in mind and provides the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allows me to automatically deploy changes when I merge PR’s to my &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;It will allow me to setup some webhooks in future to easily trigger a new build and deploy when new content gets published in the CMS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How I set up CI/CD&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Firstly install &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; by running &lt;code class=&quot;language-text&quot;&gt;npm install gh-pages --save&lt;/code&gt;, this package provides a way to publish the build files to a specified branch (defaults to &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; branch)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, create a GitHub access token, this will allow repository access from the GitHub Actions workflow, needed to push changes to the &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; branch for deployment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to GitHub -&gt; Settings -&gt; Developer Settings -&gt; Personal access tokens&lt;/li&gt;
&lt;li&gt;Select “Generate new token”, create one which gives access to “repo” and save it with a descriptive name&lt;/li&gt;
&lt;li&gt;Copy the value of this token&lt;/li&gt;
&lt;li&gt;Navigate to the GitHub repository -&gt; Settings -&gt; Secrets&lt;/li&gt;
&lt;li&gt;Select “New repository secret”&lt;/li&gt;
&lt;li&gt;Paste the token as the Value, and set the name as &lt;code class=&quot;language-text&quot;&gt;GH_TOKEN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now write two scripts in &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;deploy&amp;quot;: &amp;quot;gatsby build --prefix-paths &amp;amp;&amp;amp; gh-pages -d public&amp;quot;&lt;/code&gt; - this script allows deployment to be carried out manually&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;quot;deploy:ci&amp;quot;: &amp;quot;gatsby build --prefix-paths &amp;amp;&amp;amp; gh-pages -d public -r https://$GH_TOKEN@github.com/username/repo.git&amp;quot;&lt;/code&gt; - this script will be used by our GitHub Actions workflow, it uses the token created in the previous step&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a GitHub Actions workflow: &lt;code class=&quot;language-text&quot;&gt;.github/workflows/deploy.yml&lt;/code&gt; and add the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Gatsby Deploy

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; main

&lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.GH_TOKEN &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GitHub Config
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          git config --global user.email &quot;example@example.example&quot;
          git config --global user.name &quot;example&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install dependencies
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          npm install&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run deploy&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ci&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Replace the example username and email with your own details in the &lt;code class=&quot;language-text&quot;&gt;.yml&lt;/code&gt; file (alternatively, if you have privacy concerns, you can set these up as GitHub secrets too following the steps used above, simply replace the email and quotation marks with something like &lt;code class=&quot;language-text&quot;&gt;$EMAIL&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;And that’s it! Commit and push the changes to your &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; branch and it will trigger the workflow and deploy to GitHub Pages&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[First Post]]></title><description><![CDATA[This is the first post on my new blog. The purpose of this blog is to document and share my learning journey. In this post I will cover…]]></description><link>https://sk52.github.io/first-post/</link><guid isPermaLink="false">https://sk52.github.io/first-post/</guid><pubDate>Sat, 27 Mar 2021 16:57:00 GMT</pubDate><content:encoded>&lt;p&gt;This is the first post on my new blog.&lt;/p&gt;
&lt;p&gt;The purpose of this blog is to document and share my learning journey. In this post I will cover:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Ideas going forward&lt;/li&gt;
&lt;li&gt;Setting up a basic Gatsby blog using the &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;Gatsby Starter Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I’m a software engineer living and working in London, UK.&lt;/p&gt;
&lt;p&gt;The first topic which I’ll be writing about is in fact about this very site - I’m keen to document the journey, starting with a basic Gatsby template and modifying it to suit my needs.&lt;/p&gt;
&lt;h2&gt;Ideas&lt;/h2&gt;
&lt;p&gt;Things that I’ve got in mind for future changes include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deploying the site using GitHub Pages (if you’re reading this then it’s safe to assume this task is complete!)&lt;/li&gt;
&lt;li&gt;Moving towards using a headless CMS rather than markdown for my blog posts&lt;/li&gt;
&lt;li&gt;Setting up a basic CI/CD pipeline to suit my needs, likely GitHub Actions to begin with for easy deployment to GitHub Pages. Although I would like to extend this to handle auto redeploys on publishing new posts in the CMS of choice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setting up a basic Gatsby blog&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The first step is to install the Gatsby CLI globally by running &lt;code class=&quot;language-text&quot;&gt;npm install -g gatsby-cli&lt;/code&gt; as documented at &lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/gatsby-cli/&quot;&gt;www.gatsbyjs.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Next it’s as simple as running the Gatsby &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt; command specifying which starter template to use. In this case, I used the blog starter by running the command &lt;code class=&quot;language-text&quot;&gt;gatsby new blog-site https://github.com/gatsbyjs/gatsby-starter-blog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once installed, &lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt; will run the new blog locally on the default port 8000&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It really is as simple as that, Gatsby makes it super quick and easy to get a basic template set up. To create new content just create a new folder in the &lt;code class=&quot;language-text&quot;&gt;content/blog&lt;/code&gt; and start writing in markdown. Gatsby will rebuild and your changes will be visible on localhost.&lt;/p&gt;</content:encoded></item></channel></rss>